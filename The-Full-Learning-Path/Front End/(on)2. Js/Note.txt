JS
https://developer.mozilla.org/en-US/

    JavaScript was introduced in 1995 as a way to add programs to web pages in the
    Netscape Navigator browser. The language has since been adopted by all other
    major graphical web browsers. It has made modern web applications possibleâ€”
    applications with which you can interact directly without doing a page reload
    for every action. JavaScript is also used in more traditional websites to provide
    various forms of interactivity and cleverness.

# Fundamentals of JavaScript
    # Variables 
        let name = ....; and you can reassign the value
        const name = ....; cant use it again
        var name = ....; old not used 


        - Note
            Always use unless you know you 
            need to change the variable 

    # Data Types

        - Primitive 
            string, numbers, boolean
            null, undefined, symbol 

        Ex.
            const name = "string";
            const age = number;
            const isBool = true/false;
            const x = null;
            const y = undefined;

            console.log(typeof name); // string

        # Conversion between string and number 
            string -> number 
                const myString = "123";
                const myNum = Number(myString);

            number -> string 
            const myNum2 = 123;
            const myString2 = myNum2.toString();

    # Strings and String methods 

        const string = "string";

            String Methods:
                .length
                    const stringLength = string.length 
               
                .includes , .startsWith and .endsWith 
                        Ex.
                            const browserType = 'mozilla';

                            if (browserType.includes('zilla')) {
                            console.log('Found zilla!');
                            } else {
                            console.log('No zilla here!');
                            }
              
                .indexOf

                .startsWitt()
                    determines whether a string begins with the characters 
                    of a specified string, returning true or false as 
                    appropriate.

                .slice(a, b)
                        'a' index at which to start extracting
                        'b' index at which to stop extracting. 

                .toLowerCase() and toUpperCase() 

                .replace(x, y)

                    -> replace 'x' with 'z'

                    Note that replace(), 
                    like many string methods, doesn't change the string
                    it was called on, but returns a new string.


                    -> replaceAll(x ,y)
                                - Finds all the occurs of x and changes with y

    # Array

        Arrays are generally described as "list-like objects";
                # Constructing an array
                    const arrayName = new Array();

                        Ex.
                            const numbers = new Array(1,2,3,4,5);

                # Creating Array's 
                    const shopping = ['bread', 'milk', 'cheese', 
                    'hummus', 'noodles'];
                    const sequence = [1, 1, 2, 3, 5, 8, 13];
                    const random = ['tree', 795, [0, 1, 2]];   

                    console.log(shopping);

                # Accessing elements from the array 
                    
                        const arr = ['one', 'two', 'three']

                        console.log(arr[0]);
                    Using loops 
                
                    for (x in arr){
                        console.log(arr[x]);
                    }

                # Destructuring
                    const FullName = ["Yonatan","Afewerk"]

                    const [firstName, lastName] = FullName

                # Adding to arrays 

                    ArrayName[index] = "New Data" (will change the data in that index value)
                    ArrayName.push("New Data")
                    ArrayName.unshift("New Data")

                # Methods 

                    .length 

                    .push (end of array), unshift (start of array)
                        arr.push("new data')
                        
                    .pop (end of array), shift (start of array)
                        arr.pop(); // removes 'three'

                    .indexOf("value")
                        arr.indexOf("two")  // 1

                    .splice(a, b)
                            'a' = start 
                            'b' = end
                        arr.splice(indexOf("value"), 1)

                    .concat()
                        merge two or more arrays. This method does not change the 
                        existing arrays, but instead returns a new array.

                            const arr3 = arr1.concat(arr2)

                # Multidimensional Arrays
                    const random = ['tree', 795, [0, 1, 2]];
                    random[2][2];

                # Converting between strings and arrays 
                        const data = 'Manchester,London,Liverpool,Birmingham,
                        Leeds,Carlisle';

                    .split()

                            const arr = data.split(',');

                    .join() or toString()
                            const joined = arr.join(',');

                # Checks 

                    Array.isArray(arr) will return true if the array exists 

    # Conditionals 

        # if--else 

            if (condition) {
                /* code to run if condition is true */
            } else {
                /* run some other code instead */
            }

                or without the else 

            if (condition) {
                /* code to run if condition is true */
            }
        
        # else if 

                if (condition) {
                    /* code to run if condition is true */
                } else if (condition) {
                    /* run some other code instead */
                } else {
                    /* run some other code instead */
                }

        # Logical operators 

            # AND   &&
            # OR    ||
            # NOT   !
            # Ternary operator 
                    
                condition ? doThisIfTrue : doThisIfFalse

                let z = 10

                const color = z > 5 ? "green" : "red";

        # Switch 
        
            switch (expression) {
                case choice1:
                    run this code
                    break;

                case choice2:
                    run this code instead
                    break;

                // include as many cases as you like

                default:
                    actually, just run this code
            }

    # Function 

        # Defining function 
            1: 
                                        |-> argument's 
                function functionName(u, x) { 
                    returns x + u; 
                }

                Calling 
                    -> functionName(u, x)
                                      |-> u, x parameters
                    Ex.
                        function myFunc(theArr) {
                            theArr[0] = 30;
                        }

                        const arr = [45];

                        console.log(arr[0]); // 45
                        myFunc(arr);
                        
                        console.log(arr[0]); // 30

                        
            2:
                const functionName = () => {
                    let x = 1
                    let u = 2

                    returns x + u; 
                }

        # Closures 
            inner function can be accessed only from 
            statements in the outer function.

            const addSqr = (k, l) => {
                const square = (s) => {
                    return s * s;
                };

                return square(k) + square(l);
            };

            const a = addSqr(3, 2);

                Ex.

                function A(x) {
                    function B(y) {
                        function C(z) {
                            console.log(x + y + z);
                        }
                        C(3);
                    }
                    B(2);
                }
                A(1); // logs 6 (1 + 2 + 3)

    # Loops and iteration 

        # For Loop

            for (initializer; condition; increment) {
                code
            }

            Ex. 
                for (let step = 0; step < 5; step++) {
                    // Runs 5 times, with values of step 0 through 4.

                    console.log(`Walking east ${step+1} step`);
                }

        # do...while Loop

            initializer 
            do{
                code 
                increment
            }
            while (condition);

            Ex.
                let i = 0;
                do {
                    i += 1;
                    console.log(i);
                } while (i < 5);
       
        # While 

            initializer 
            while(condition) {
                code 
                increment
            }
            
            Ex.
                let n = 0;
                let x = 0;
                while (n < 3) {
                    n++;
                    x += n;
                }

        # Statements
            # Labeled 

                label:
                    statement(s)

                        Ex.
                            markLoop:
                            while (theMark) {
                                doSomething();
                            }
            # Break 
            # Continue

            # for...in 

                for (variable in object){
                    statement
                };

            # for...of 

                for (variable of object){
                    statement
                };

                    Ex.
                    const arr = [3, 5, 7];
                    arr.foo = 'hello';

                    for (const i in arr) {
                    console.log(i); // logs "0", "1", "2", "foo"
                    }

                    for (const i of arr) {
                    console.log(i); // logs 3, 5, 7
                    }

        # High Order array methods
            const array = ["one","two","three","four","five"]

            # forEach method

                array.forEach((element, index) => {
                    // some operations on the element
                    // maybe you want to use the index of the element
                });

            # map method 
                ->  Biggest difference from forEach method is that it has 
                    return of another array so it is possible to chain with 
                    other methods 

                const returnedArr = array.map(currentEle => {
                    // some operation on currentEle
                })

                    # Chain Example 

                        const checkFilter = todos.filter((todo) => {
                            if (todo.isCompleted === true) {
                            return true;
                            }
                        }).map((todo) => {
                            return todo.text;
                        });

                        console.log(checkFilter);


            # reduce method 
                -> to compute a single values based on the data stored in an array

                const reducedVal = array.reduce(callback, initialVal);


                    Ex.
                        var array = ["a", "b", "c", "d", "e"];

                        function add(x, y) {
                            return x + y;
                        }

                        const stringed = array.reduce(add);

                                a b
                                ab c
                                abc d
                                abcd e
                                -> output abcde


                        or

                        const stringed = array.reduce(add, "A");

                                A a
                                Aa b
                                Aab c
                                Aabc d
                                Aabcd e

                                 -> output Aabcde

            # filer method 
                 extract a sub-array from a larger array, 
                 based on some common property. 

                    const filteredArr = array.filter(callback);


                    Ex.
                        const fixedArray = NewArray.filter((arr) => {
                            if (!arr.startsWith("C")) {
                                return true;
                            }
                        });
          
            # sort 
                assumes that all the array elements are String by default, and sorts 
                the elements based on the UTF-16 code values

                    const demo = [100, 20, 89, 3, 17];
                    demo.sort(); 

                    // output = [100, 17, 20, 3, 89]

                    to make it work properly 

                    const sortedArray = demo.sort((a, b) => {
                        return a - b;
                    });

                        If callback(a, b) returns less than 0, a comes before b.
                        If callback(a, b) returns 0, a and b are left at their current index.
                        If callback(a, b) returns greater than 0, b comes before a

                    console.log(sortedArray);

    # Objects 

        Helps us group different values that are related together
        let obj = {
            title : "Title",
            dueDate : "03-03-2202"
        }
        obj.title -> "Title"
        object.dueDate -> "03-03-2202"

        or 

        obj['title']
            - This makes using variables possible 

                var = "title"
                obj[var] -> "Title"

        property-value pairs 



        # Objects Constructor functions and Prototypes  

            // constructor function
            function Person(fname, lname, dob) {
                this.fname = fname;
                this.lname = lname;
                this.dob = new Date(dob);
            }

                // Creating prototypes functions 
            Person.prototype.getFullName = function () {
                return `${this.fname} ${this.lname}`;
            };

            Person.prototype.getBirthYear = function () {
              return this.dob.getFullYear();
            };

            // instantiate object

            const person1 = new Person("Jhon", "John", "4-3-1880");
            const person2 = new Person("two", "two", "4-3-2750");
            const person3 = new Person("three", "three", "4-3-1022");
            const person4 = new Person("four", "four", "4-3-2022");

            console.log(person1.getBirthYear());
            console.log(person1.getFullName());

        # Class (ES6)

            -> Does the same things as the above code better looks kinda better 
                and your create the prototypes with the class itself 

                class Person {
                    constructor(fname, lname, dob) {
                        this.fname = fname;
                        this.lname = lname;
                        this.dob = new Date(dob);
                    }
                    getFullName() {
                        return `${this.fname} ${this.lname}`;
                    }
                    getBirthYear() {
                        return this.dob.getFullYear();
                    }
                }

        # Destructuring Objects 

            const dataTypes = {
                strings: "string",
                null: "null",
                numbers: [1,2,3,4],
                boolen: {
                    one: true,
                    two: false,
                }
            }

                # Add to already existing object
                dataTypes.email = "email@example.com";

            const {strings,oull ,boolen: {one}, email} = dataTypes;

        # Creating objects withing Arrays 
            const array = [
                {objects},
                {object},
            ];

        # Working with JSON

            How to convert an Array to a string(JSON format)
                    -> JSON.stringify(array)

                            -> You can use this as an input as "data" in localStorage
                        
            How to convert an string to an Array 
                    -> JSON.parse(string)

                            -> Ex. for localStorage cases where you converted an
                                    array-string to store you can parse it 
                                    
                                const savedData = JSON.parse(localStorage.getItem(key))

                            
# Events

    Event	            Description
    onchange	        An HTML element has been changed
    onclick	            The user clicks an HTML element
    onmouseover	        The user moves the mouse over an HTML element
    onmouseout	        The user moves the mouse away from an HTML element
    onkeydown	        The user pushes a keyboard key
    onload	            The browser has finished loading the page
    DOMContentLoaded	The browser has finished loading the pages

    Events --> Actions 


    # Inline Events 

        Ex. 
         <button class="clickBtn" onclick="console.log('Just Got Clicked')">Click</button>


    # addEventListener 
        var.addEventListener("click", function (e) {
            // Functions Code Goes here
         });

         or 
         function functionName(e) {
            // Functions Code Goes here
         }

         attach the function to the event by

         var.addEventListener("click), functionName;


        Ex.
        const onbtn = document.getElementById("clickBtn");

        onbtn.addEventListener("click", function (e) {
        console.log("Clicked");

        if (onbtn.classList.contains("red")) {
            onbtn.classList.remove("red");
        } else {
            onbtn.classList.add("red");
        }
        });

        Or using functions 

        function handleClick(e) {
            console.log("Clicked");
            onbtn.innerHTML = "Clicked";

            if (onbtn.classList.contains("red")) {
                onbtn.classList.remove("red");
                onbtn.innerHTML = "Click";
            } else {
                onbtn.classList.add("red");
            }
        }

        onbtn.addEventListener("click", handleClick);



    # Event Object 

    var.addEventListener("click" , function(e) {}):

        e -> is the event object 

                Stores data in the event object 
                to use within the function
                    Ex.
                      console.log(e);


    # Standard vs Arrow 
        Standard:
          onbtn.addEventListener("click", function(e){
                console.log(this);
            });

        Arrow:
            onbtn.addEventListener("click", (e) => {
                console.log(this);
            });

                The whole global window object is logged

# querySelector 

    The querySelector() method returns the first element that matches a CSS selector.
    To return all matches (not only the first), use the querySelectorAll() instead.
    Both querySelector() and querySelectorAll() 
        Note 
            throw a SYNTAX_ERR exception if the selector(s) is invalid.


        # QuerySelector Methods:
            The querySelector() Method
                Selects the First element
                    ".class", "#id", "h1-h4"(elements)

            The querySelectorAll() Method (selects everything)

# DOM Manipulation 

    Are Objects and the programming interface is the method 
    and property of each object.
        Method: action to be done 
            Ex. add, or delete elements 
        property: value to set or get 
            Ex. like changing the content of an html element 

        Ex 
        getElementById is a method, 
        while innerHTML is a property.

        For Html:
            <p id="demo"></p>
        For Js: 
            document.getElementById("demo").innerHTML = "Hello, world!";

    # Finding HTML Elements , 
                The getElementById() Method

                The getElementsByTagName() Method

                The getElementsByClassName() Method
                
    # Changing HTML Elements , 
    # Adding and Deleting Elements,
    # Adding Events Handlers,
    # Finding HTML Objects
       
        https://www.w3schools.com/js/js_htmldom_document.asp

# Day 2 (Two)



# DOM (Document Object Model)

# MVC Architecture
    (Model View Controller)

        M:
            -> Contains all the code that saved and manages data
        V:
            -> Contains all the code that manages visuals.
                Render visuals using the data in the model 
        C:
            -> Connects the model and view together::
                    1,  Responds to events from the view 
                    2. Tells the model to update its data 

# Local Storage 

    localStorage.setItem("key","data");
        -> Saves a string (data) and associates it with a key 
    localStorage.geItem("key");
        -> Returns the string using the associated key it's using 

# Note: This

 