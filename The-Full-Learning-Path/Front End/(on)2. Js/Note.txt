JS
https://developer.mozilla.org/en-US/

    Tips:
        (alt + left || right)
             alt and the side keys to change position across single worlds!


    JavaScript was introduced in 1995 as a way to add programs to web pages in the
    Netscape Navigator browser. The language has since been adopted by all other
    major graphical web browsers. It has made modern web applications possibleâ€”
    applications with which you can interact directly without doing a page reload
    for every action. JavaScript is also used in more traditional websites to provide
    various forms of interactivity and cleverness.

# Fundamentals of JavaScript
    # Variables 
        -> the name scheme for the variables should always be in 
           [ camelCase ]

        let name = ....; and you can reassign the value
        const name = ....; cant use it again (readonly variable)
        var name = ....; old and not that good to use (you shouldn't)


        - Note
            Always use (const) unless you know you 
            need to change the variable and in that case use (let)

    # Data Types

        - Primitive 
            string, numbers, boolean
            null, undefined, symbol 

        Ex.
            const name = "string";
            const age = number;
            const isBool = true/false;
            const x = null;
            const y = undefined;

            console.log(typeof name); // string

        # Conversion between string and number 
            string -> number 
                const myString = "123";
                const myNum = Number(myString);

            number -> string 
            const myNum2 = 123;
            const myString2 = myNum2.toString();


            or 
            

            var myInt = parseInt("10.256"); //10
            var myFloat = parseFloat("10.256"); //10.256

    # Strings and String methods 
        String values are immutable, which means that they cannot be altered once created.

        const string = "string";

            String Methods:
                .length
                    const stringLength = string.length 
               
                .includes , .startsWith and .endsWith 
                        Ex.
                            const browserType = 'mozilla';

                            if (browserType.includes('zilla')) {
                            console.log('Found zilla!');
                            } else {
                            console.log('No zilla here!');
                            }
              
                .indexOf

                .startsWitt()
                    determines whether a string begins with the characters 
                    of a specified string, returning true or false as 
                    appropriate.

                .slice(a, b)
                        'a' index at which to start extracting
                        'b' index at which to stop extracting. 

                .toLowerCase() and toUpperCase() 

                .replace(x, y)

                    -> replace 'x' with 'z'

                    Note that replace(), 
                    like many string methods, doesn't change the string
                    it was called on, but returns a new string.


                    -> replaceAll(x ,y)
                                - Finds all the occurs of x and changes with y

    # Array

        # Arrays are generally described as "list-like objects";
                # Constructing an array
                    const arrayName = new Array();

                        Ex.
                            const numbers = new Array(1,2,3,4,5);

                # Creating Array's 
                    const shopping = ['bread', 'milk', 'cheese', 
                    'hummus', 'noodles'];
                    const sequence = [1, 1, 2, 3, 5, 8, 13];
                    const random = ['tree', 795, [0, 1, 2]];   

                    console.log(shopping);

                # Accessing elements from the array 
                    
                        const arr = ['one', 'two', 'three']

                        console.log(arr[0]);
                    Using loops 
                
                    for (x in arr){
                        console.log(arr[x]);
                    }

                # Destructuring
                    const FullName = ["Yonatan","Afewerk"]

                    const [firstName, lastName] = FullName

                # Adding to arrays 

                    ArrayName[index] = "New Data" (will change the data in that index value)
                    ArrayName.push("New Data")
                    ArrayName.unshift("New Data")

                # Methods 

                    .length 

                    .push (end of array), unshift() (start of array)
                        arr.push("new data')
                        
                    .pop (end of array), shift() (start of array)
                        arr.pop(); // removes 'three'

                    .indexOf("value")
                        arr.indexOf("two")  // 1

                    .splice(a, b)
                            'a' = start 
                            'b' = end
                        arr.splice(indexOf("value"), 1)

                    .concat()
                        merge two or more arrays. This method does not change the 
                        existing arrays, but instead returns a new array.

                            const arr3 = arr1.concat(arr2)


                # Multidimensional Arrays
                    
                    const random = ['tree', 795, [0, 1, 2]];
                    random[2][2];

                # Converting between strings and arrays 
                        const data = 'Manchester,London,Liverpool,Birmingham,
                        Leeds,Carlisle';

                    .split()

                            const arr = data.split(',');

                    .join() or toString()
                            const joined = arr.join(',');

                # Checks 

                    Array.isArray(arr) will return true if the array exists 

        # High Order array methods
                const array = ["one","two","three","four","five"]

                # forEach method

                    array.forEach((element, index) => {
                        // some operations on the element
                        // maybe you want to use the index of the element
                    });

                # map method 
                    ->  Biggest difference from forEach method is that it has 
                        return of another array so it is possible to chain with 
                        other methods 

                    const returnedArr = array.map(currentEle => {
                        // some operation on currentEle
                    })

                        # Chain Example 

                            const checkFilter = todos.filter((todo) => {
                                if (todo.isCompleted === true) {
                                return true;
                                }
                            }).map((todo) => {
                                return todo.text;
                            });

                            console.log(checkFilter);

    # Conditionals 
        # Logical Order in If Else Statements

            When considering if , else if statements 
            the logical order matter's

            The statements will be checked in order so make sure
            the logic doesn't get affected in teh process!


        # if--else 

            if (condition) {
                /* code to run if condition is true */
            } else {
                /* run some other code instead */
            }

                or without the else 

            if (condition) {
                /* code to run if condition is true */
            }
        
        # else if 

                if (condition) {
                    /* code to run if condition is true */
                } else if (condition) {
                    /* run some other code instead */
                } else {
                    /* run some other code instead */
                }

        # Logical operators 

            # AND   &&
            # OR    ||
            # NOT   !
            # Ternary operator 
                    
                condition ? doThisIfTrue : doThisIfFalse

                let z = 10

                const color = z > 5 ? "green" : "red";

                Ex.
                    function checkEqual(a, b) {
                        return a === b ? "Equal" : "Not Equal"
                    }

                    checkEqual(1, 2);


                # Multiple ternary conditionals 

                    function checkSign(num) {
                        return num === 0 ? "zero"
                            : num > 0 ? "positive"
                            : "negative"
                    }

                    checkSign(10);

        # Switch 

            Note: tests a value and can have many case statement
            which define various possible values 

            Tip:
                case values are tested with strict equality (===)

            # singular switch cases 
                switch (expression) {
                    case choice1:
                        run this code
                        break;

                    case choice2:
                        run this code instead
                        break;

                    // include as many cases as you like

                    default:
                        actually, just run this code
                }

            # Multiple Identical cases 
                let result = "";
                switch (val) {
                    case 1:
                    case 2:
                    case 3:
                        result = "1, 2, or 3";
                        break;
                    case 4:
                        result = "4 alone";
                }

    # Function 

        # Defining function 
            1: 
                                        |-> argument's 
                function functionName(u, x) { 
                    returns x + u; 
                }

                Calling 
                    -> functionName(u, x)
                                      |-> u, x parameters
                    Ex.
                        function myFunc(theArr) {
                            theArr[0] = 30;
                        }

                        const arr = [45];

                        console.log(arr[0]); // 45
                        myFunc(arr);
                        
                        console.log(arr[0]); // 30

                        
            2: (arrow way of Defining functions a bit cooler no difference tho)
                const functionName = () => {
                    let x = 1
                    let u = 2

                    returns x + u; 
                }

        # Closures 
            inner function can be accessed only from 
            statements in the outer function.

            const addSqr = (k, l) => {
                const square = (s) => {
                    return s * s;
                };

                return square(k) + square(l);
            };

            const a = addSqr(3, 2);

                Ex.

                function A(x) {
                    function B(y) {
                        function C(z) {
                            console.log(x + y + z);
                        }
                        C(3);
                    }
                    B(2);
                }
                A(1); // logs 6 (1 + 2 + 3)

        #  Scope and Functions (where the variables can be seen everywhere in your JavaScript code)
            Types:
                Block scope
                Function scope
                Global scope


            # Block 
                {
                  let x = 2;
                }
                // x can NOT be used here


            # Function  (Local)

                Tip: 
                    cause the variables only exist in the function they are declared 
                    in you can have multiple variables with the same name but only 
                    in different function!

                // code here can NOT use carName

                function myFunction() {
                     let carName = "Volvo";
                    // code here CAN use carName
                }

                // code here can NOT use carName

            # Global
                Note:
                    Variables are declared outside on any block or function
                    then they are said to be Global scoped cause every function 
                    can access them at the same time!

                1: 
                    let carName = "Volvo";
                    // code here can use carName

                    function myFunction() {
                        // code here can also use carName
                    }

                2:
                   # Automatically global variables

                        myFunction();

                        // code here can use carName

                        function myFunction() {
                        carName = "Volvo";
                        }

        # Strict Mode!
            Tips:
                Blocks Automatically set Global Variables from working!

            "use strict"; Defines that JavaScript code should be executed in "strict mode".
            
            How to Declare it?
                Strict mode is declared by adding "use strict"; 
                to the beginning of a script or a function.

                "use strict";
                myFunction();

                function myFunction() {
                    y = 3.14;   // This will also cause an error because y is not declared
                }

    # Loops and iteration 

        # For Loop            
            for (initializer; condition; increment) {
                code
            }

            Ex. 
                for (let step = 0; step < 5; step++) {
                    // Runs 5 times, with values of step 0 through 4.

                    console.log(`Walking east ${step+1} step`);
                }

        # do...while Loop

            initializer 
            do{
                code 
                increment
            }
            while (condition);

            Ex.
                let i = 0;
                do {
                    i += 1;
                    console.log(i);
                } while (i < 5);
       
        # While 

            Runs while a specified condition is true and stops once its 
            false 

            initializer 
            while(condition) {
                code 
                increment
            }
            
            Ex.
                let n = 0;
                let x = 0;
                while (n < 3) {
                    n++;
                    x += n;
                }

        # Statements
            # Labeled 

                label:
                    statement(s)

                        Ex.
                            markLoop:
                            while (theMark) {
                                doSomething();
                            }
            # Break 
            # Continue

            # for...in 

                for (variable in object){
                    statement
                };

            # for...of 

                for (variable of object){
                    statement
                };

                    Ex.
                    const arr = [3, 5, 7];
                    arr.foo = 'hello';

                    for (const i in arr) {
                    console.log(i); // logs "0", "1", "2", "foo"
                    }

                    for (const i of arr) {
                    console.log(i); // logs 3, 5, 7
                    }

        


            # reduce method 
                -> to compute a single values based on the data stored in an array

                const reducedVal = array.reduce(callback, initialVal);


                    Ex.
                        var array = ["a", "b", "c", "d", "e"];

                        function add(x, y) {
                            return x + y;
                        }

                        const stringed = array.reduce(add);

                                a b
                                ab c
                                abc d
                                abcd e
                                -> output abcde


                        or

                        const stringed = array.reduce(add, "A");

                                A a
                                Aa b
                                Aab c
                                Aabc d
                                Aabcd e

                                 -> output Aabcde

            # filer method 
                 extract a sub-array from a larger array, 
                 based on some common property. 

                    const filteredArr = array.filter(callback);


                    Ex.
                        const fixedArray = NewArray.filter((arr) => {
                            if (!arr.startsWith("C")) {
                                return true;
                            }
                        });
          
            # sort 
                assumes that all the array elements are String by default, and sorts 
                the elements based on the UTF-16 code values

                    const demo = [100, 20, 89, 3, 17];
                    demo.sort(); 

                    // output = [100, 17, 20, 3, 89]

                    to make it work properly 

                    const sortedArray = demo.sort((a, b) => {
                        return a - b;
                    });

                        If callback(a, b) returns less than 0, a comes before b.
                        If callback(a, b) returns 0, a and b are left at their current index.
                        If callback(a, b) returns greater than 0, b comes before a

                    console.log(sortedArray);
        
        # Replace Loops using Recursion 
            
    # Objects 

        Helps us group different values that are related together

            # Accessing methods 
                let obj = {
                    title : "Title",
                    dueDate : "03-03-2202"
                }
                obj.title -> "Title"
                object.dueDate -> "03-03-2202"

                or 

                obj['title']
                    - This makes using variables possible 

                        var = "title"
                        obj[var] -> "Title"

                property-value pairs 

            # Objects Constructor functions and Prototypes  

                // constructor function

                function Person(fname, lname, dob) {
                    this.fname = fname;
                    this.lname = lname;
                    this.dob = new Date(dob);
                }

                // Creating prototypes functions 

                Person.prototype.getFullName = function () {
                    return `${this.fname} ${this.lname}`;
                };

                Person.prototype.getBirthYear = function () {
                return this.dob.getFullYear();
                };

                // instantiate object

                const person1 = new Person("Jhon", "John", "4-3-1880");
                const person2 = new Person("two", "two", "4-3-2750");
                const person3 = new Person("three", "three", "4-3-1022");
                const person4 = new Person("four", "four", "4-3-2022");

                console.log(person1.getBirthYear());
                console.log(person1.getFullName());

            # Updating objects 
                const ourDog = {
                    "name": "Camper",
                    "legs": 4,
                    "tails": 1,
                    "friends": ["everything!"]
                };

                    # Change

                        ourDog.name = "new name";
                            or
                                ourDog["name"] = "new name";

                    # add another properties 

                        myDog.bark = "woof"
                            or
                            myDog["bark"] = "woof"

                    # Deleting properties

                        delete myDog.tails
                            or
                            delete myDog["bark"]
                            
            # Class (ES6)
            

                -> Does the same things as the above code better looks kinda better 
                    and your create the prototypes with the class itself 

                    class Person {
                        constructor(fname, lname, dob) {
                            this.fname = fname;
                            this.lname = lname;
                            this.dob = new Date(dob);
                        }
                        getFullName() {
                            return `${this.fname} ${this.lname}`;
                        }
                        getBirthYear() {
                            return this.dob.getFullYear();
                        }
                    }

                    // instantiate object

                    const person1 = new Person("Jhon", "John", "4-3-1880");
                    const person2 = new Person("two", "two", "4-3-2750");

                    console.log(person2.getFullName());

            # Destructuring Objects 

                const dataTypes = {
                    strings: "string",
                    null: "null",
                    numbers: [1,2,3,4],
                    boolen: {
                        one: true,
                        two: false,
                    }
                }

                    # Add to already existing object
                    dataTypes.email = "email@example.com";

                const {strings,oull ,boolen: {one}, email} = dataTypes;

            # Creating objects withing Arrays 
                const array = [
                    {objects},
                    {object},
                ];

            # Working with JSON

                How to convert an Array to a string(JSON format)
                        -> JSON.stringify(array)

                                -> You can use this as an input as "data" in localStorage
                            
                How to convert an string to an Array 
                        -> JSON.parse(string)

                                -> Ex. for localStorage cases where you converted an
                                        array-string to store you can parse it 
                                        
                                    const savedData = JSON.parse(localStorage.getItem(key))

            # Testing Objects for Properties 

                .hasOwnProperty(propName)
                    returns true or false 
                if the property is found or not.

# Events

    Event	            Description
    onchange	        An HTML element has been changed
    onclick	            The user clicks an HTML element
    onmouseover	        The user moves the mouse over an HTML element
    onmouseout	        The user moves the mouse away from an HTML element
    onkeydown	        The user pushes a keyboard key
    onload	            The browser has finished loading the page
    DOMContentLoaded	The browser has finished loading the pages

    Events --> Actions 


    # Inline Events 

        Ex. 
         <button class="clickBtn" onclick="console.log('Just Got Clicked')">Click</button>

    # addEventListener 

        # Creating Event Listener's 

            var.addEventListener("click", function (e) {
                // Functions Code Goes here
            });

            or 

            function functionName(e) {
                // Functions Code Goes here
            } (you can also user arrow functions)

            attach the function to the event by

            var.addEventListener("click), functionName;


            Ex.
            const onbtn = document.getElementById("clickBtn");

            onbtn.addEventListener("click", function (e) {
            console.log("Clicked");

                if (onbtn.classList.contains("red")) {
                    onbtn.classList.remove("red");
                } else {
                    onbtn.classList.add("red");
                }
            });

            Or using functions 

            function handleClick(e) {
                console.log("Clicked");
                onbtn.innerHTML = "Clicked";

                if (onbtn.classList.contains("red")) {
                    onbtn.classList.remove("red");
                    onbtn.innerHTML = "Click";
                } else {
                    onbtn.classList.add("red");
                }
            }

            onbtn.addEventListener("click", handleClick);

        # Event Parameter 

            Ex. 
                btn.addEventListener("click", (e) => {
                    // This is where you use event parameters 
                });

            e.target
            e.type
                // width from the browsers window
            e.clientX
            e.clientY
                // width from the element itself 
            e.offsetX
            e.offsetY
            e.altKey, ctrlKey and shiftKey

        # Mouse events
            # dblclick
            # mousedown
            # mouseup
            # mousecenter
            # mouseleave
            # mouseover and mouseout
            # mousemove

        # Keyboard & input Events 
            # keydown & keyup
            # focus & blur 
            # cut
            # scroll
            # paste 
            # input 
            # change 
            # submit 

    # Event Object 

        var.addEventListener("click" , function(e) {}):

            e -> is the event object 

                    Stores data in the event object 
                    to use within the function
                        Ex.
                        console.log(e);

    # Standard vs Arrow 
        Standard:
          onbtn.addEventListener("click", function(e){
                console.log(this);
            });

        Arrow:
            onbtn.addEventListener("click", (e) => {
                console.log(this);
            });

                The whole global window object is logged

# querySelector 

    The querySelector() method returns the first element that matches a CSS selector.
    To return all matches (not only the first), use the querySelectorAll() instead.
    Both querySelector() and querySelectorAll() 
        Note 
            throw a SYNTAX_ERR exception if the selector(s) is invalid.


        # QuerySelector Methods:
            The querySelector() Method
                Selects the First element
                    ".class", "#id", "h1-h4"(elements)

            The querySelectorAll() Method (selects everything)

# DOM Manipulation 
   Live DOM Viewer
        https://software.hixie.ch/utilities/js/live-dom-viewer/

    Parts of the web browser 
        - Navigator
        - Window
        - Document 
    



        Are Objects and the programming interface is the method 
        and property of each object.
            Method: action to be done 
                Ex. add, or delete elements 
            property: value to set or get 
                Ex. like changing the content of an html element 

                    Ex 
                    getElementById is a method, 
                    while innerHTML is a property.

                    For Html:
                        <p id="demo"></p>
                    For Js: 
                        document.getElementById("demo").innerHTML = "Hello, world!";

        # Finding HTML Elements , 
                    The getElementById() Method

                    The getElementsByTagName() Method

                    The getElementsByClassName() Method
                    
        # Changing HTML Elements , 
        # Adding and Deleting Elements,
        # Adding Events Handlers,
        # Finding HTML Objects
        
            https://www.w3schools.com/js/js_htmldom_document.asp

    # Selecting nodes 
        
        # document.querySelector() 
              Method works for all just different input based on type \
              and return only a single element 
        # document.querySelectorAll()
              Return all elements matching the search in an iterable list 
            
            # Other old ways 

                .class
                    document.getElementsByClassName("")
                #id
                    document.getElementById("")
                tag
                    document.getElementsByTagName("")
    
    # Creating nodes 

        Steps:
            1- Select the parent element you want to create into
                const div = document.querySelector(div);

            2- Create in element(s)

                const title = document.createElement("h1")
                const note = document.createElement("p")

            3- append the childe to the parent 
                div.appendChild(title)
                div.appendChild(note)

        # How to set attributes

            div.className = "name"
            div.id = "id"

            or 

            div.setAttribute("id", "id")
            div.setAttribute("class", "name")

    # Removing nodes 

        node.removeChild(child)

            Ex.
                div.removeChild(note)
        To remove the parent node itself 
            div.remove();

    # Manipulating styles 

            title.style.color = "white";
            title.style.backgroundColor = "black";

        - Setting attributes 

            title.setAttribute('class', 'highlight');

    # Adding content to nodes 

        # .innerHTML
        # .innerText
        # .textContent

    # Traversing the Dom
        # .parentElement 
        # .parentNode
        # .childNodes (".children" is better to use always!)
        # .firstElementChild (.lastElementChild)
        # .nextElementSibling (previousElementSibling)... 
        # .insertBefore
            // The Node.insertBefore() method inserts a node before a
            // reference node as a child of a specified parent node.
        
                 let insertedNode = parentNode.insertBefore(newNode, referenceNode)

# MVC Architecture
    (Model View Controller)

        M:
            -> Contains all the code that saved and manages data
        V:
            -> Contains all the code that manages visuals.
                Render visuals using the data in the model 
        C:
            -> Connects the model and view together::
                    1,  Responds to events from the view 
                    2.  Tells the model to update its data 

# Local Storage 

    localStorage.setItem("key","data");
        -> Saves a string (data) and associates it with a key 
    localStorage.geItem("key");
        -> Returns the string using the associated key it's using 



    -> Ex: for a color picker :: saves the id of the clicked checkbox and when the page is loaded it changes the saved id's checkbox to checked 

        // Creating local storage
        const colorTheme = document.querySelectorAll("[name='theme']");

        //  Store
        const storeTheme = function (theme) {
        localStorage.setItem("theme", theme);
        };

        colorTheme.forEach((themeOption) => {
        themeOption.addEventListener("click", () => {
            storeTheme(themeOption.id);
        });
        });

        // Load it every time page is rendered
        const savedTheme = localStorage.getItem("theme");

        colorTheme.forEach((themeOption) => {
        if (themeOption.id == savedTheme) {
            themeOption.checked = true;
        }
        });

# Fetch API method      

    <!--./data.JSON-->

    {
        "id": 1,
        "title": "Hello World",
        "completed": false
    }

    // Create a function to access the data 
    function showArray(data){
        for(let prop in data){
            console.log(prop)
            console.log(data[prop])
        }
    }


    fetch("./data.json")
        .then(function (response) {
            return response.json();
        })
        .then(function (data) {
            showArray(data);
        });

# Note: This
    # setTimeout

        method calls a function after a number of milliseconds.
        
        1 second = 1000 milliseconds.


        setTimeout(function () {
            myFunc("param1", "param2");
        }, milliseconds);

            Ex.
                setTimeout(function, milliseconds, param1, param2, ...)

                    setTimeout(() => {
                        msg1.remove();
                    }, 3000);

# Freecodecamp 

    - Basic JavaScript 

        Tips 

            Escaping Literal Quotes in String

                const myStr = "I am a \"double quoted\" string inside \"double quotes\".";

            
                or 

                you can use ('') on the outside when using ("")
                or vise versa 
            
            Escape Sequences in Strings
                \'	single quote
                \"	double quote
                \\	backslash
                \n	newline
                \t	tab
                \r	carriage return
                \b	word boundary
                \f	form feed


            # How generate random numbers 

                Math.random()
                    -> will return a decimal between 
                        0  - < 1

                Math.floor()


                Range:
                    formula:
                        Math.floor(Math.random() * (max - min + 1)) + min

                        Ex. 

                            function randomRange(myMin, myMax) {

                                return Math.floor(Math.random() * (myMax - myMin + 1))+ myMin;
                            }                


            # Parse function 
                # parseInt Vs parseFloat

                    function convertToInteger(str) {
                        return parseInt(str)
                    }

                    convertToInteger("56");


                    # Using it with Radix 
                        parseInt(string, radix);
                        
                            radix can be an integer between 2 and 36.

                        Ex. 
                            function convertToInteger(str) {
                            return parseInt(str, 2)
                            }

                            console.log(convertToInteger("10011"));
