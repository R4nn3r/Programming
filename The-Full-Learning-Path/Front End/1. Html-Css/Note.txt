HTML (Hypertext Markup Language)

# HTML
    <!-- -> Commenting --> 

# Basic HTML

        Headers                 (<h1></h1> -> upto <h6></h6> where they get smaller in size)
        Links                   ( <link rel="stylesheet" href="#"> ) stylesheet or css file
                                ( <link rel="icon" href="#"> ) for icon of the site

                                ( <a href="Google.com" target="_blank">Googel</a> ) link to google
                                        -> attribute = name

        Internal Links          (   <a href="#contacts-header">Contacts</a>
                                 ...
                                    <h2 id="contacts-header">Contacts</h2>   )
        Paragraphs              ( <p>This is where you write your Paragraphs </p> )
        Images                  ( <img src="source link" alt="info about image"> )
        Inputs                  ( <input type="[text,checkbox,radio]" name="" value="" placeholder="" required>)
        Audio 
                                <audio id="meowClip" controls>
                                    <source src="audio/meow.mp3" type="audio/mpeg">
                                    <source src="audio/meow.ogg" type="audio/ogg">
                                </audio>   

        
            Require a Field
                (required added to inputs will result in the input being mandatory to fill in)

            Creating radio and checkbox's
                <label for="indoor">
                    <input id="indoor" type="radio" name="indoor-outdoor" value="indoor" checked> Indoor
                </label>    -> (Checked makes the check active by default)
                
                <label for="energetic">
                    <input id="energetic" type="checkbox" name="personality"> Energetic
                </label>
                   

        Div Container :         <div>  s allow us to group elements together and create 
                                more complex layouts. 
                    <div class="container">
                        ... (maybe other multiple Div's)
                    </div>

    -> The HTML Structure 
                <!DOCTYPE html>     Tells the browser to use a modern version of HTML. 
                <html> 
                    <head> 
                    ... 
                    </head>         <head>  contains everything that's  not visible  like  the 
                                title and description(a.k.a. metadata) as well as links to fonts 
                                and CSS stylesheets. 
                    <body> 
                    ... 
                    </body>         <body>  contains everything that's  visible  like buttons,  text, images, etc. 
                </html> 


    # Advanced HTML
            Semantic elements: (Are elements that clearly explain there content)
                Headers         <header></header>
                Nav             <nav></nav>
                Main            <main></main>
                Section         <section></section>
                
                Ex.
                    <article>, <aside>, <details>, <figcaption>, <figure>, <footer>
                    <mark>, <summary>, <time>


                    Note:
    
                           <article> is a sectioning element and is used to wrap independent, self-contained content. 
                           The tag works well with blog entries, forum posts, or news articles.

                           <section> is for grouping thematically related content. They can be used within each other, as 
                           needed. For example, if a book is the article, then each chapter is a section. When there's no 
                           relationship between groups of content, then use a <div>.
                        - So,

                            <div> - groups content 
                            <section> - groups related content 
                            <article> - groups independent, self-contained content
                            <header> -  wrap introductory information or navigation links for 
                                        its parent tag and works well for repeated content at the top on multiple 
                                        pages.
                    
                            <figure> element and the related <figcaption>. Used together, these items wrap a 
                                    visual representation (like an image, diagram, or chart) along with its caption. 
                                    Wrapping these elements together gives a two-fold accessibility boost by semantically 
                                    grouping related content and providing a text alternative explaining the figure

                - Field-set and legends 
                        Ex. 
                            <form>
                                <fieldset>
                                    <legend>Choose one of these three items:</legend>
                                    <input id="one" type="radio" name="items" value="one">
                                    <label for="one">Choice One</label><br>
                                    <input id="two" type="radio" name="items" value="two">
                                    <label for="two">Choice Two</label><br>
                                    <input id="three" type="radio" name="items" value="three">
                                    <label for="three">Choice Three</label>
                                </fieldset>
                            </form>
                            
                - Date Picker

                        <label for="pickdate">Preferred Date:</label>
                        <input type="date" id="pickdate" name="date">
   
   
   
   
   
    # Tag Reference
            <html>	                Defines the root of an HTML document
            <body>	                Defines the document's body
            <h1> to <h6>            Defines HTML headings


        # Attributes

            href        (<a href="https://www.w3schools.com" target="_blank">Visit W3Schools</a>) 
                        specifies the URL of the page the link goes to

            src         (<img src="img_girl.jpg">)
                        specifies the path to the image to be displayed
                            Absolute URL    src="https://www.w3schools.com/images/img_girl.jpg"
                        # Relative URL    src="/images/img_girl.jpg"
                        
            width and height    (<img src="img_girl.jpg" width="500" height="600">)
                                provide size information for images

            alt     (<img src="img_girl.jpg" alt="Girl with a jacket">)
                    tag specifies an alternate text for an image
            
            title       (<p title="I'm a tooltip">This is a paragraph.</p>)
                        Defines an extra information about the element (logo, icon, etc)

        # File Path 

            Path	                                Description
            <img src="picture.jpg">	The "           picture.jpg" file is located in the 
                                                    same folder as the current page
            <img src="images/picture.jpg">	        The "picture.jpg" file is located in the 
                                                    images folder in the current folder
            <img src="/images/picture.jpg">	        The "picture.jpg" file is located in the 
                                                    images folder at the root of the current web
            <img src="../picture.jpg">	            The "picture.jpg" file is located in the 
                                                    folder one level up from the current folder

        # Button
            <button type="button"> Click </button>

# Basic Css 

    -> link with your Html file with:
                        <link rel="stylesheet" href="example.css">
                    
    Selectors:
            elements        -> ( div {...})
            class           -> (.class_name {...})
            id              -> (#id_tag {...})
    
    # Advanced Css Selectors 
            -> refer to the image or google for the table

    Box Model:
        1. Margin = space on the outside    
                        Ex.
                            margin: 10px; (all around)
                            margin: 10px 10px; (top/bottom and left/right)
                            margin: top, right, bottom, left] 
        2. Padding = space on the inside   
                        Ex.
                            Same as margin but inside :)
        3. Border              
                        Ex.
                        border-width:  1px;   Sets the border width. 
                        border-style:  solid;   Sets the border style (to a solid color). 
                        border-color:  red;   Sets the border color. 
                                or
                        border:  width style color; 
                        border:  1px  solid red  ; 

        
    Using root to set variables (helps with Responsive in @media)
                :root {
                    --penguin-size: 300px;
                    --penguin-skin: gray;
                    --penguin-belly: white;
                    --penguin-beak: orange;
                }
           
           
                @media (max-width: 350px) {
                    :root {
                        --penguin-size: 200px;
                        --penguin-skin: black;
                    }
                }

# Applied Visual Design

    - text-align property.

            text-align: justify; spaces the text so that each line has equal width.

            text-align: center; centers the text

            text-align: right; right-aligns the text

            And text-align: left; (the default) left-aligns the text.

    - Tags
            underline  
            strong 
            italic
            emphasis 
            strike-through
            HorizontalLine 

     - Box-shadow 
            property takes the following values, in order:

                offset-x (how far to push the shadow horizontally from the element)
                offset-y (how far to push the shadow vertically from the element)
                blur-radius
                spread-radius
                color

    - text-transform values change the example text "Transform me".

                Value	                    Result

                lowercase	                "transform me"
                uppercase	                "TRANSFORM ME"
                capitalize	                "Transform Me"
                initial	                    Use the default value
                inherit	                    Use the text-transform value from the parent element
                none	                    Default: Use the original text


    - Line-height

    - Relative Position

            it allows you to specify how CSS should move it relative to its current position 
            in the normal flow of the page. It pairs with the CSS offset properties of left 
            or right, and top or bottom    

    - Absolute Positioning (Lock an Element to its Parent)
                Note: this removes the element from the normal flow of the document, 
                so surrounding items ignore it. 

            You declare position relative on the element you want to lock the position with
            then declare position absolute on the element to be positioned 

    - Fixed Positioning (Lock an Element to the Browser Window)

            Note: One key difference between the fixed and absolute positions is that an 
            element with a fixed position won't move when the user scrolls.


    - Float Property

            Floating elements are removed from the normal flow of a document and pushed to 
            either the left or right of their containing parent element. It's commonly used 
            with the width property to specify how much horizontal space the floated element 
            requires.

    - z-index Property

            property can specify the order of how elements are stacked on top of one another. 
            It must be an integer (i.e. a whole number and not a decimal), and higher values 
            for the z-index property of an element move it higher in the stack than those with
            lower values.


    - Center an Element Horizontally

            - Using the margin Property

                Another positioning technique is to center a block element horizontally. 
                One way to do this is to set its margin to a value of auto.

                        margin: auto;

    - Gradual CSS Linear Gradient
            background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);

                    The first argument specifies the direction from which color transition starts - 
                    it can be stated as a degree, where 90deg makes a horizontal gradient (from left to right)
                     and 45deg makes a diagonal gradient (from bottom left to top right). The following 
                     arguments specify the order of colors used in the gradient.

            background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));

            - using the gradient to create strips using the repeating-linear-gradient()
                    Ex.
                            background: repeating-linear-gradient(
                                        45deg,
                                        yellow 0px,
                                        yellow 40px,
                                        black 40px,
                                        black 80px
                                        );
    - Transform
        (using)
                scale()
                    - to change the scale of an element
                            transform: scale(1);
                skewX()
                    - skew the selected elements along the X axis by a given degree
                            transform: skewX(-32deg);

                rotate()
                    - rotate the selected elements by a given degree

    - before and after 
            ::before and ::after pseudo-elements. 
                ::before creates a pseudo-element that is the first child of the selected element; 
                ::after creates a pseudo-element that is the last child of the selected element. 



    - @keyframes
            animation-name: sets the name of the animation, which is later used by @keyframes to tell 
                            CSS which rules go with which animations.

            animation-duration sets the length of time for the animation.


                    Ex. 
                         #anim {
                            animation-name: colorful;
                            animation-duration: 3s;
                        }

                        @keyframes colorful {
                            0% {
                                background-color: blue;
                        }
                            100% {
                                background-color: yellow;
                            }
                        }   


            - Animate Elements Continually Using an Infinite Animation Count

                    animation-iteration-count: 3;
                    run continuously by setting that value to infinite.

# Layout 

        # Grid 

            Steps -
                displayed: grid
                gap
                # setting a column up is good but just until you create a media query
                grid-template-columns: repeat(4, 1fr);

            # You can use 
                grid-template-columns
                grid-template-rows

                # with grid row, col span
                grid-row:
                grid-column:

            # or create and use 
                grid-template-areas: 
                    - create areas

                attach the areas with the nth-child of element

                    - create media query and create the layout as you see fit 
                    by embedding the grid-template-areas in it
              
# Tips For Layouts

    To Create the Vertical Layouts 
        ●  Use  <div>'s with  display  :  block  (most common) 
        ●  Use flexbox with  flex-direction  :  column 
        ●  Use CSS grid  with 1 column 

    To Create the Horizontal Layouts 
        ●  Use  <div>'s with  display  :  inline-block  (not recommended) 
        ●  Use flexbox with  flex-direction  :  row 
        ●  Use CSS grid with multiple columns 

    # Type of elements
        Block elements                          -> They take the whole line
        Inline-Block elements                   -> only takes space they need
        Inline                                 

# Responsive Design 
    
    - Media Query
                (min max works for both height and width)
            width is less than or equal to 100px:
                @media (max-width: 100px) { /* CSS Rules */ }

             height is more than or equal to 350px   
                @media (min-height: 350px) { /* CSS Rules */ }














# Best Practice to follow to get a better grip on the industry

    # Optimization of the web site using npm packages
        - npm init 
        - npm install postcss postcss-cli autoprefixer cssnano postcss-pxtorem --save-dev
        - Write the script 
            "scripts": {
                    "optimize-css":"postcss style.css --use autoprefixer cssnano postcss-pxtorem --output style.prod.css --no-map"
                },
        - Run the script
            npm run optimize-css


        - Deploy to git pages or netlify 