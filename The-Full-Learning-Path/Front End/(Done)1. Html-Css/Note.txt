HTML (Hypertext Markup Language)

# HTML
    <!-- -> Commenting --> 

# Basic HTML

        Headers                 (<h1></h1> -> upto <h6></h6> where they get smaller in size)
        Links                   ( <link rel="stylesheet" href="#"> ) stylesheet or css file
                                ( <link rel="icon" href="#"> ) for icon of the site

                                ( <a href="Google.com" target="_blank">Googel</a> ) link to google
                                        -> attribute = name

        Internal Links          (   <a href="#contacts-header">Contacts</a>
                                 ...
                                    <h2 id="contacts-header">Contacts</h2>   )
        Paragraphs              ( <p>This is where you write your Paragraphs </p> )
        Images                  ( <img src="source link" alt="info about image"> )
        Inputs                  ( <input type="[text,checkbox,radio]" name="" value="" placeholder="" required>)
        Audio 
                                <audio id="meowClip" controls>
                                    <source src="audio/meow.mp3" type="audio/mpeg">
                                    <source src="audio/meow.ogg" type="audio/ogg">
                                </audio>   

        
            Require a Field
                (required added to inputs will result in the input being mandatory to fill in)

            Creating radio and checkbox's
                <label for="indoor">
                    <input id="indoor" type="radio" name="indoor-outdoor" value="indoor" checked> Indoor
                </label>    -> (Checked makes the check active by default)
                
                <label for="energetic">
                    <input id="energetic" type="checkbox" name="personality"> Energetic
                </label>
                   

        Div Container :         <div>  s allow us to group elements together and create 
                                more complex layouts. 
                    <div class="container">
                        ... (maybe other multiple Div's)
                    </div>

    -> The HTML Structure 
                <!DOCTYPE html>     Tells the browser to use a modern version of HTML. 
                <html> 
                    <head> 
                    ... 
                    </head>         <head>  contains everything that's  not visible  like  the 
                                title and description(a.k.a. metadata) as well as links to fonts 
                                and CSS stylesheets. 
                    <body> 
                    ... 
                    </body>         <body>  contains everything that's  visible  like buttons,  text, images, etc. 
                </html> 


    # Advanced HTML
            Semantic elements: (Are elements that clearly explain there content)
                Headers         <header></header>
                Nav             <nav></nav>
                Main            <main></main>
                Section         <section></section>
                
                Ex.
                    <article>, <aside>, <details>, <figcaption>, <figure>, <footer>
                    <mark>, <summary>, <time>


                    Note:
    
                           <article> is a sectioning element and is used to wrap independent, self-contained content. 
                           The tag works well with blog entries, forum posts, or news articles.

                           <section> is for grouping thematically related content. They can be used within each other, as 
                           needed. For example, if a book is the article, then each chapter is a section. When there's no 
                           relationship between groups of content, then use a <div>.
                        - So,

                            <div> - groups content 
                            <section> - groups related content 
                            <article> - groups independent, self-contained content
                            <header> -  wrap introductory information or navigation links for 
                                        its parent tag and works well for repeated content at the top on multiple 
                                        pages.
                    
                            <figure> element and the related <figcaption>. Used together, these items wrap a 
                                    visual representation (like an image, diagram, or chart) along with its caption. 
                                    Wrapping these elements together gives a two-fold accessibility boost by semantically 
                                    grouping related content and providing a text alternative explaining the figure

                - Field-set and legends 
                        Ex. 
                            <form>
                                <fieldset>
                                    <legend>Choose one of these three items:</legend>
                                    <input id="one" type="radio" name="items" value="one">
                                    <label for="one">Choice One</label><br>
                                    <input id="two" type="radio" name="items" value="two">
                                    <label for="two">Choice Two</label><br>
                                    <input id="three" type="radio" name="items" value="three">
                                    <label for="three">Choice Three</label>
                                </fieldset>
                            </form>
                            
                - Date Picker

                        <label for="pickdate">Preferred Date:</label>
                        <input type="date" id="pickdate" name="date">
   
   
   
   
   
    # Tag Reference
            <html>	                Defines the root of an HTML document
            <body>	                Defines the document's body
            <h1> to <h6>            Defines HTML headings


        # Attributes

            href        (<a href="https://www.w3schools.com" target="_blank">Visit W3Schools</a>) 
                        specifies the URL of the page the link goes to

            src         (<img src="img_girl.jpg">)
                        specifies the path to the image to be displayed
                            Absolute URL    src="https://www.w3schools.com/images/img_girl.jpg"
                        # Relative URL    src="/images/img_girl.jpg"
                        
            width and height    (<img src="img_girl.jpg" width="500" height="600">)
                                provide size information for images

            alt     (<img src="img_girl.jpg" alt="Girl with a jacket">)
                    tag specifies an alternate text for an image
            
            title       (<p title="I'm a tooltip">This is a paragraph.</p>)
                        Defines an extra information about the element (logo, icon, etc)

        # File Path 

            Path	                                Description
            <img src="picture.jpg">	The "           picture.jpg" file is located in the 
                                                    same folder as the current page
            <img src="images/picture.jpg">	        The "picture.jpg" file is located in the 
                                                    images folder in the current folder
            <img src="/images/picture.jpg">	        The "picture.jpg" file is located in the 
                                                    images folder at the root of the current web
            <img src="../picture.jpg">	            The "picture.jpg" file is located in the 
                                                    folder one level up from the current folder

        # Button
            <button type="button"> Click </button>

# Basic Css 

    -> link with your Html file with:
                        <link rel="stylesheet" href="example.css">
                    
    Selectors:
            elements        -> ( div {...})
            class           -> (.class_name {...})
            id              -> (#id_tag {...})
    
    # Advanced Css Selectors 
            -> refer to the image or google for the table

    Box Model:
        1. Margin = space on the outside    
                        Ex.
                            margin: 10px; (all around)
                            margin: 10px 10px; (top/bottom and left/right)
                            margin: top, right, bottom, left] 
        2. Padding = space on the inside   
                        Ex.
                            Same as margin but inside :)
        3. Border              
                        Ex.
                        border-width:  1px;   Sets the border width. 
                        border-style:  solid;   Sets the border style (to a solid color). 
                        border-color:  red;   Sets the border color. 
                                or
                        border:  width style color; 
                        border:  1px  solid red  ; 

        
    Using root to set variables (helps with Responsive in @media)
                :root {
                    --penguin-size: 300px;
                    --penguin-skin: gray;
                    --penguin-belly: white;
                    --penguin-beak: orange;
                }
           
           
                @media (max-width: 350px) {
                    :root {
                        --penguin-size: 200px;
                        --penguin-skin: black;
                    }
                }

# Applied Visual Design

    - text-align property.

            text-align: justify; spaces the text so that each line has equal width.

            text-align: center; centers the text

            text-align: right; right-aligns the text

            And text-align: left; (the default) left-aligns the text.

    - Tags
            underline  
            strong 
            italic
            emphasis 
            strike-through
            HorizontalLine 

     - Box-shadow 
            property takes the following values, in order:

                offset-x (how far to push the shadow horizontally from the element)
                offset-y (how far to push the shadow vertically from the element)
                blur-radius
                spread-radius
                color

    - text-transform values change the example text "Transform me".

                Value	                    Result

                lowercase	                "transform me"
                uppercase	                "TRANSFORM ME"
                capitalize	                "Transform Me"
                initial	                    Use the default value
                inherit	                    Use the text-transform value from the parent element
                none	                    Default: Use the original text


    - Line-height

    - Relative Position

            it allows you to specify how CSS should move it relative to its current position 
            in the normal flow of the page. It pairs with the CSS offset properties of left 
            or right, and top or bottom    

    - Absolute Positioning (Lock an Element to its Parent)
                Note: this removes the element from the normal flow of the document, 
                so surrounding items ignore it. 

            You declare position relative on the element you want to lock the position with
            then declare position absolute on the element to be positioned 

    - Fixed Positioning (Lock an Element to the Browser Window)

            Note: One key difference between the fixed and absolute positions is that an 
            element with a fixed position won't move when the user scrolls.


    - Float Property

            Floating elements are removed from the normal flow of a document and pushed to 
            either the left or right of their containing parent element. It's commonly used 
            with the width property to specify how much horizontal space the floated element 
            requires.

    - z-index Property

            property can specify the order of how elements are stacked on top of one another. 
            It must be an integer (i.e. a whole number and not a decimal), and higher values 
            for the z-index property of an element move it higher in the stack than those with
            lower values.


    - Center an Element Horizontally

            - Using the margin Property

                Another positioning technique is to center a block element horizontally. 
                One way to do this is to set its margin to a value of auto.

                        margin: auto;

    - Gradual CSS Linear Gradient
            background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);

                    The first argument specifies the direction from which color transition starts - 
                    it can be stated as a degree, where 90deg makes a horizontal gradient (from left to right)
                     and 45deg makes a diagonal gradient (from bottom left to top right). The following 
                     arguments specify the order of colors used in the gradient.

            background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));

            - using the gradient to create strips using the repeating-linear-gradient()
                    Ex.
                            background: repeating-linear-gradient(
                                        45deg,
                                        yellow 0px,
                                        yellow 40px,
                                        black 40px,
                                        black 80px
                                        );
    - Transform
        (using)
                scale()
                    - to change the scale of an element
                            transform: scale(1);
                skewX()
                    - skew the selected elements along the X axis by a given degree
                            transform: skewX(-32deg);

                rotate()
                    - rotate the selected elements by a given degree

    - before and after 
            ::before and ::after pseudo-elements. 
                ::before creates a pseudo-element that is the first child of the selected element; 
                ::after creates a pseudo-element that is the last child of the selected element. 



    - @keyframes
            animation-name: sets the name of the animation, which is later used by @keyframes to tell 
                            CSS which rules go with which animations.

            animation-duration sets the length of time for the animation.


                    Ex. 
                         #anim {
                            animation-name: colorful;
                            animation-duration: 3s;
                        }

                        @keyframes colorful {
                            0% {
                                background-color: blue;
                        }
                            100% {
                                background-color: yellow;
                            }
                        }   


            - Animate Elements Continually Using an Infinite Animation Count

                    animation-iteration-count: 3;
                    run continuously by setting that value to infinite.

# Layout 
        # Flexbox
            With flexbox, it's easy to center elements on the page and create 
            dynamic user interfaces that shrink and expand automatically.

                    Note: The direction is based on the flex-direction property.
                (row)
            justify-items (main axis horizontally)
            align-items (cross axis vertically)
            
            - container

                display: flexbox | inline-flex;
                flex-direction: row | row-reverse | column | column-reverse;
                flex-wrap: nowrap | wrap | wrap-reverse;
                flex-flow: <‘flex-direction’> || <‘flex-wrap’>
                justify-content: flex-start | flex-end | center | space-between | space-around;
                align-items: flex-start | flex-end | center | baseline | stretch;
                align-content: flex-start | flex-end | center | space-between | space-around | stretch;

            -  items/elements

                order: <integer>;
                flex-grow: <number>; /* default 0 */
                flex-shrink: <number>; /* default 1 */
                flex-basis: <length> | auto; /* default auto */
                flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
                align-self: auto | flex-start | flex-end | center | baseline | stretch;


            - flex Shorthand Property

                    Ex, 
                        
                    flex: 1 0 10px; 

                    will set the item(children) to 
                        flex-grow: 1;, 
                        flex-shrink: 0;,  
                        flex-basis: 10px;.

            - align-self
                accepts the same values as align-items and will override any value set by the 
                align-items property.

            - min and max -content 

                width: max-content;
                    Try's to get to the smallest size without needing to wrap

                width: min-content;
                    Try's to get to the width of the longest single word



        # Grid 
                Note: In CSS Grid, the parent element is referred to as 
                the container and its children are called items.


            - Size of Columns and Rows

                    fr: sets the column or row to a fraction of the available space,

                    auto: sets the column or row to the width or height of its content automatically,

                    %: adjusts the column or row to the percent width of its container.

                    Here's the code that generates the output in the preview:

            - Aligning items

                    - justify-self: (horizontally)
                        stretch | start | end | center
                            content of each item is located in a box which is referred to as a cell. 
                            You can align the content's position within its cell horizontally using 
                            the justify-self property on a grid item. By default, this property has a 
                            value of stretch,

                    - align-self: (vertically)
                        (same rule)


            - Aligning all of the items 
                    - justify-items
                    - align-items


            - Grid area template's (best way to use grid)
                    
                    Ex. 
                        grid-template-areas:
                            "header header header"
                            "advert content content"
                            "advert footer footer";

                    Note: Use grid-area Without Creating an Areas Template

                    grid-area: horizontal line to start at / vertical line to start at / horizontal line to end at / vertical line to end at;

                            item1 { 
                                grid-area: 1/1/2/4; 
                                }        

            - minmax Function
                used to limit the size of items when the grid container changes size. To do this you need 
                to specify the acceptable size range for your item. Here is an example:

                    Ex.
                            grid-template-columns: 100px minmax(50px, 200px);

                    In the code above, grid-template-columns is set to create two columns; 
                    the first is 100px wide, and the second has the minimum width of 50px and 
                    the maximum width of 200px.

            - auto-fill

                repeat function comes with an option called auto-fill. This allows you to automatically 
                insert as many rows or columns of your desired size as possible depending on the size of 
                the container. You can create flexible layouts when combining auto-fill with minmax, 
                
                            repeat(auto-fill, minmax(60px, 1fr));

                    Vs auto-fit

                    difference is that when the container's size exceeds the size of all the items combined, 
                    auto-fill keeps inserting empty rows or columns and pushes your items to the side, while 
                    auto-fit collapses those empty rows or columns and stretches your items to fit the size of 
                    the container.



            Steps -
                displayed: grid
                gap
                # setting a column up is good but just until you create a media query
                grid-template-columns: repeat(4, 1fr);

            # Use
                grid-template-columns
                grid-template-rows

                # with grid row, col span
                grid-row:
                grid-column:

            # or create and use 
                grid-template-areas: 
                    - create areas

                attach the areas with the nth-child of element

                    - create media query and create the layout as you see fit 
                    by embedding the grid-template-areas in it
        
# Tips For Layouts

    To Create the Vertical Layouts 
        ●  Use  <div>'s with  display  :  block  (most common) 
        ●  Use flexbox with  flex-direction  :  column 
        ●  Use CSS grid  with 1 column 

    To Create the Horizontal Layouts 
        ●  Use  <div>'s with  display  :  inline-block  (not recommended) 
        ●  Use flexbox with  flex-direction  :  row 
        ●  Use CSS grid with multiple columns 

    # Type of elements
        Block elements                          -> They take the whole line
        Inline-Block elements                   -> only takes space they need
        Inline                                 

# Responsive Design 
    
    - Media Query
                (min max works for both height and width)
            width is less than or equal to 100px:
                @media (max-width: 100px) { /* CSS Rules */ }

             height is more than or equal to 350px   
                @media (min-height: 350px) { /* CSS Rules */ }

    - Use a Retina Image for Higher Resolution Displays

        The simplest way to make your images properly appear on High-Resolution Displays,
        such as the MacBook Pros "retina display" is to define their width and height values 
        as only half of what the original file is. Here is an example of an image that is only 
        using half of the original height and width:


    - Make Typography Responsive
            Instead of using em or px to size text, you can use viewport units for responsive typography. 
            Viewport units, like percentages, are relative units, but they are based off different items. 
            Viewport units are relative to the viewport dimensions (width or height) of a device, and 
            percentages are relative to the size of the parent container element.

           The four different viewport units are: 

                vw (viewport width): 10vw would be 10% of the viewport's width.
                vh (viewport height): 3vh would be 3% of the viewport's height.
                vmin (viewport minimum): 70vmin would be 70% of the viewport's smaller dimension (height or width).
                vmax (viewport maximum): 100vmax would be 100% of the viewport's bigger dimension (height or width).

# Best Practice to follow to get a better grip on the industry.

    # Optimization of the web site using npm packages
        - npm init 
        - npm install postcss postcss-cli autoprefixer cssnano postcss-pxtorem --save-dev
        - Write the script 
            "scripts": {
                    "optimize-css":"postcss style.css --use autoprefixer cssnano postcss-pxtorem --output style.prod.css --no-map"
                },
        - Run the script
            npm run optimize-css


        - Deploy to git pages or netlify 


    # Making a website start to finish 

        1: Have a good look at the design and try to figure out on some routes to can take
           from 
                - how you can structure the html to how you can style the page 
                - what can be generalized and used in common
                - how to use the media query to make the site responsive 
                - and complication you may have going through writing the code 
                - decide on how you can abstract more of your properties
        2: npm create vite@latest
            chose the options as needed
                cd to the directory
                    npm install

                    npm run dev
                        -> to run local host

        3: Before staring you need to rest the default css styles 

                -> https://gist.github.com/Asjas/4b0736108d56197fce0ec9068145b421


                tip: Change this from what ever it was before 
                        /* Remove default margin */
                        * {
                            margin: 0;
                            padding: 0;
                            font: inherit;  -> (makes you style every element from the class)
                        }
                tip:
                    add
                    scroll-behavior: smooth;

        4:  Create custom set ups for the variable on :root sot it gets easier to
            use for responsiveness and it does look better 

                - Create utility classes  
                    -> make sure your utility list has low specificity 

        5: Create the Html structure 

        6: General styling 
            - For Svg 
                https://svgsprit.es/

                    make a general.svg
                        - paste the sprit on it 
                          and use that to import svg on the site 
                          its better then just using and img 
            - For sticky navbar's 
                scroll-padding-top: 2em;
                    So that the content doesn't slide under the navbar


        <html lang="en">
            <head>
                <title>Hello</title>
            </head>
            <body>
                <header>This is the header</header>
                <nav>This is the nav</nav>
                <main>This is the main</main>
                <footer>This is the footer</footer>
            </body>
        </html>

        <html lang="en">
        <head>
                <title>Hello</title>
            </head>
            <body>
                <div role="banner">This is the header</div>
                <div role="navigation">This is the nav</div>
                <div role="main">This is the main</div>
                <div role="contentinfo">This is the footer</div>
            </body>
        </html>

# Position's 
        # Relative (recommended for the parent element)
            position: relative;


        # Absolute  (relative to the parent or the body by default)
            position: absolute;
            top: 0%;
            bottom: 0%;
            left: 0%;
            right: 0%;

        # z-index 
            You can use the z-index to layer elements 
            but you need to have positions on the elements

    
        # Types of Position's
            # Static (default)

            # Relative 
                (look at is as an anchor everything below 
                this will be positioned relative to this element )

            # absolute 
                removes the element from the normal flow of the page 

                NOTE:
                    The main difference between relative and absolute positioning 
                    is that position: absolute will take a child element completely 
                    out of the normal flow of the document. And that child will 
                    be positioned in relation to the first parent element that has 
                    its own position set.

            # Fixed 
                remove from normal flow -> place it in the same place in the viewport

                    Tip:    A fixed element must have a top or bottom position set. 
                            If it doesn’t, it will simply not exist on the page at all.

            # sticky 
                act like relative elements but on scroll change to fixed elements 

# pseudo elements and class's
    - ::first-line Pseudo-element
             Note: The ::first-line pseudo-element can only be applied to 
             block-level elements.

    - ::first-letter Pseudo-element
            Note: Same rule applies from the last 'Note'


    - The ::before Pseudo-element
                Insert's some content before the content of an element.

    - The ::after Pseudo-element
                    Insert's some content after the content of an element.


    - :target 

    - :only-child , :first-child , :last-child, only-of-type

# !Important 

    - Inheritance 
        Core Concept:
            When you set a property for a parent mostly the children of that parent will get to
            inherit those properties.
           
           # font-* properties are inherited

            properties such as height, width, border, margin, padding, etc. are not inherited.
           
                Note: 
                Form elements don;t follow the inheritance rule by default.
                "inherit" keyword allows authors to explicitly specify inheritance. 
                It works on both inherited and non-inherited properties.

    - The Cascade 
            The cascading algorithm determines how to find the value to apply
            for each property for each document element.

            Thus steps followed by the algo,
                - Relevance
                - Origin and importance
                - Specificity
                - Order of appearance 
            

            Note: 
                Transitions and animations
                    Property values set by animation @keyframes are more important than all 
                    normal styles (those with no !important set).
                    Property values being set in a transition take precedence over all other
                    values set, even those marked with !important.

    - Dealing with the box model

            Tip:
                *,
                *::before,
                ::after {
                    box-sizing: border-box;
                }

            This means the padding and margin will be consider with the properties
            that set your height and width 

    - Specificity
            If there are two or more CSS rules that point to the same element, the 
            selector with the highest specificity value will "win", and its style 
            declaration will be applied to that HTML element.


        # There are four categories which define the specificity level of a selector:

            Inline styles - Example: <h1 style="color: pink;">
            IDs - Example: #navbar
            Classes, pseudo-classes, attribute selectors - Example: .test, :hover, [href]
            Elements and pseudo-elements - Example: h1, :before

    - Naming stuff

            Make sure the name's are 
                - Meaningful names

    - Creating Layouts
        
    - Content vs Layout 

# Background Images 
    
    # Steps 
        create a parent and set the background img in css of the container 
        and use flex to position the child

    
        tip:
            use - to edit the blend on the background the backup bg-color 
            background-blend-mode

# How to [Special Cases]?

    # Hamburger Menu

        Creating your own Menu icon using 
            span 
                (
                    display: block;
                    width: 26px;
                    height: 2px;
                    background-color: var(--crl-primary);
                )

    # mixins 
        Steps: 
           - Create breakpoints 

                // 640px , 1024px, 1400px
                $breakpoints-up: (
                "medium": "40em",
                "large": "64em",
                "xlarge": "87.5em",
                );

                // 639px, 1023px. 1399px
                $breakpoints-down: (
                "small": "39.9375em",
                "medium": "63.9375em",
                "large": "84.4375em",
                );

            - Create mixins 

                @mixin breakpoint-up($size) {
                @media (min-width: map-get($breakpoints-up, $size)) {
                    @content;
                }
                }
                @mixin breakpoint-down($size) {
                @media (max-width: map-get($breakpoints-down, $size)) {
                    @content;
                }
                }

            - Create utility classes for the viewport 
                Ex, for visibility of menus (header styles)
                    // Visibility
                    .hide-for-mobile {
                    // hide for tablet and mobile devices
                    @include breakpoint-down(medium) {
                        display: none;
                    }
                    }

                    .hide-for-desktop {
                    // hide for desktop browsers
                    @include breakpoint-up(large) {
                        display: none;
                    }
                    }

            - Last step use the classes make your life easier :)


    # Box shadow 

        box-shadow: 0px 3px 12px rgba(0, 0, 0, 0.15);
                    (x) (y) (spread)   (color)
            

    # To Structure Html properly

        1-  The very first and important step is to go through the design properly.
        2-  The second step is to wireframe the design in form of HTML 
            block representation by the TLF (Top Left Flow) approach
                
                + The TLF approach works in the following manner:

                        First, divide the design horizontally.
                        Then divide the horizontal parts vertically.

                Note:
                    The proper way of using the TLF approach is to see whether the design block can 
                    be divided horizontally. If YES, divide. If NO, see whether the design block can 
                    be divided vertically. Repeat the same until all the design blocks have been covered.

                    Tip:
                        Always use comments ( Easy for us to remember in the future and to understand for others)
                        Make use of proper semantic HTML Tags.  *****
                                <article> 	Defines independent, self-contained content
                                <aside> 	Defines content aside from the page content
                                <details> 	Defines additional details that the user can view or hide
                                <figcaption> 	Defines a caption for a <figure> element
                                <figure> 	Specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.
                                <footer> 	Defines a footer for a document or section
                                <header> 	Specifies a header for a document or section
                                <main> 	Specifies the main content of a document
                                <mark> 	Defines marked/highlighted text
                                <nav> 	Defines navigation links
                                <section> 	Defines a section in a document
                                <summary> 	Defines a visible heading for a <details> element
                                <time> 	Defines a date/time
                        Avoid using deprecated HTML Tags.
                        Validate your HTML code. 
                        Avoid using unwanted HTML Elements.
                        Always use the DOCTYPE Declaration.

# Flow layout 
    Normal flow or flow layout is the awy that block and inline elemetns are displayed on A
    page before any changes are made to their layout

        # What are Block and inline elements

            1- Block
                    always takes up the full width available 
                    (stretches out to the left and right as far as it can).

                    footers, headers, main, section, div. form. nav, article, video...

            2 - Inline 
                    takes up as much width as necessary.

                    a, button, input, img, select, span, 

# Sass , Bem

    # Sass Partials 
        Creating partitions for the styles based on there structure
            Ex.
                Header  ->      _header.scss
                Hero    ->      _hero.scss
                Footer  ->      _footer.scss   

        
        For bigger projects you can even partition based on type of element 
            Ex,

                Typography   ->   _typography.scss
                Reset   -> _reset.scss


        Then create load them on main sass file called index 
            Ex.
                globals (folder)
                    _index.scss 
                        @forward "reset"
                        @forward "typography"
                

                Main style scss 
                    style.scss
                        @forward "globals"

    # Creating variables
    
        (CSS)
        # Root

            :root {
                --ff-primary: monospace;
                --txt-crl: blue;
            }

            to use the variables 
                -> var(--txt-crl)

        (SASS)

            $ff-primary: monospace;
            $txt-crl: blue;

                to use the variables 
                    -> $txt-crl

    # Using custom modules 
        Create a folder that contain the style 
        and import whole folder as a module

            Ex. 
                utility
                    _fonts.scss
                        $font-color: blue;

                    _colors.scss
                
                To import 
                    @use "location of utility" as util;

                            -> as util (is a namespace)
                            -> you can use a wildcard 
                                @use "location of utility" as *
                                    
                                    color: @font-color
                    
                    color: util.@font-color

    # Using BEM (Block, Element, Modifier methodology)

        BEM is a front-end naming method for organizing and naming CSS classes.
            Block:
                which holds everything (elements) inside and acts as a scope.

            Element:
                which acts as a specific part of the component.

            Modifier:
                which adds additional styles to a specific element(s).

            
            Ex.
                (html)

                    <div class="head">
                        <div class="head__eye head__eye--left">(o)</div>
                        <div class="head__eye head__eye--right">(o)</div>
                    </div>

                (scss)

                    .head { -> block
                        &__eye { -> element

                            &--left{ -> modifier

                            }
                            &--right{
                                
                            }
                        }
                    }